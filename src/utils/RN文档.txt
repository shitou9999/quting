布局
https://github.com/huangchucai/javascript-30/blob/43673770111c7af3fa3ee7b3e87dcad0c4e32744/five-day/readme.md
C:\Users\PVer\AppData\Roaming\npm\node_modules
//bind将事件操作和函数处理建立联系，bind和箭头函数都能完成这一绑定

父容器 （flex-direction,align-items,justify-content,flex-wrap, align-cotents）
自容器 (flex-grow, flex-strink,flex-basis,flex,align-self)
********************************************************
netstat -ano

netstat -aon|findstr "8081"

********************************************************

React Native 学习资源精选仓库
https://juejin.im/entry/59dd786cf265da431d3ba6e3#es6es7

https://github.com/MyDreamWuBiLian/nCargoApp
https://github.com/ivan-khr85/place-app/blob/958735132a74d81dca81f9acfc3c593231d08ee3/src/index.js
**************************************************************************
推送
地图
支付
APP更新

**************************************************************************
http://localhost:8081/index.bundle?platform=android

adb reverse tcp:8081 tcp:8081

指定版本：npm install --save react-native@0.47.2

启动本地js服务服务：npm start
浏览器中访问http://localhost:8081/index.bundle?platform=android
运行adb reverse tcp:8081 tcp:8081 (建立一个从设备向电脑转发的端口,前提是设备和电脑通过USB相连) 不需要更多配置,你就可以使用Reload JS和其它的开发.

react-native --help
react-native run-android
react-native upgrade
npm install react-navigation-redux-helpers --save

//查看第三方版本变化情况
npm outdated命令查看当前有哪些组件或者第三方库版本有版本更新
//2.在package.json文件里面找到第三方库，手动修改版本号至***。
//3.执行npm update jshare-react-native（如果命令后面不写jshare-react-native将会把可以更新的（红色字体的）全部更新）

**************************************************************************
npm install --save prop-types
react-native-iphone-x-helper
react-native-modalbox
react-native-spinkit

     optionalArray: PropTypes.array,//检测数组类型
     optionalBool: PropTypes.bool,//检测布尔类型
     optionalFunc: PropTypes.func,//检测函数（Function类型）
     optionalNumber: PropTypes.number,//检测数字
     optionalObject: PropTypes.object,//检测对象
     optionalString: PropTypes.string,//检测字符串
     optionalSymbol: PropTypes.symbol,//ES6新增的symbol类型
     boolean:PropTypes.boolean.isRequired

     // 可以声明 prop 为指定的 JS 基本类型。默认
         // 情况下，这些 prop 都是可传可不传的。
         optionalArray: React.PropTypes.array,
         optionalBool: React.PropTypes.bool,
         optionalFunc: React.PropTypes.func,
         optionalNumber: React.PropTypes.number,
         optionalObject: React.PropTypes.object,
         optionalString: React.PropTypes.string,

         // 所有可以被渲染的对象：数字，
         // 字符串，DOM 元素或包含这些类型的数组。
         optionalNode: React.PropTypes.node,

         // React 元素
         optionalElement: React.PropTypes.element,

         // 用 JS 的 instanceof 操作符声明 prop 为类的实例。
         optionalMessage: React.PropTypes.instanceOf(Message),

         // 用 enum 来限制 prop 只接受指定的值。
         optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),

         // 指定的多个对象类型中的一个
         optionalUnion: React.PropTypes.oneOfType([
           React.PropTypes.string,
           React.PropTypes.number,
           React.PropTypes.instanceOf(Message)
         ]),

         // 指定类型组成的数组
         optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),

         // 指定类型的属性构成的对象
         optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),

         // 特定形状参数的对象
         optionalObjectWithShape: React.PropTypes.shape({
           color: React.PropTypes.string,
           fontSize: React.PropTypes.number
         }),

         // 以后任意类型加上 `isRequired` 来使 prop 不可空。
         requiredFunc: React.PropTypes.func.isRequired,

         // 不可空的任意类型
         requiredAny: React.PropTypes.any.isRequired,

         // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接
         // 使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。
         customProp: function(props, propName, componentName) {
           if (!/matchme/.test(props[propName])) {
             return new Error('Validation failed!');
           }
         }



**************************************************************************
http://beta..cc:32080/-inf/readme/index.html
http://192.168.200.151:2080
//将JSON数据转换成字符串
JSON.stringify(params)

//将数据JSON化
JSON.parse(responseJSON)

{
  "code": "000000",
  "msg": "请求服务正常返回",
  "data": {
    "id": 1100000000095,
    "userCode": "15669961385",
    "wxOpenId": null,
    "zfbOpenId": null,
    "othOpenId": null,
    "userName": null,
    "nickName": null,
    "sex": "1",
    "regType": "0",
    "userStatus": "1",
    "userType": "1",
    "regTime": "20180714163517",
    "userPic": null,
    "payPwd": null,
    "token": "295bcba203584e1290f55aa6516b1f65"
  },
  "httpStatus": 200
}

   // if (allData && allData.length > 0) {
                    //     allData.forEach((item) => {
                    //         newData.push(item)
                    //     })
                    // }

                    // for (let i= 0;i<allData.length;i++){
                    //     console.log(allData[i].changeMoney)
                    // }


                    let mapVo = new Map()
                    for (let index in json.data) {
                        let vo = {}
                        vo.lookupName = json.data[index].lookupName;
                        vo.lookupKey = json.data[index].lookupKey;
                        vo.lookupValue = json.data[index].lookupValue;
                        if (mapVo.has(vo.lookupName)) {
                            mapVo.get(vo.lookupName).push(vo)
                        } else {
                            mapVo.set(vo.lookupName, [])
                            mapVo.get(vo.lookupName).push(vo)
                        }
                    }

 requestRecommend = async () => {
        try {
            let response = await fetch(api.recommend)
            let json = await response.json()

            let dataList = json.data.map(
                (info) => {
                    return {
                        id: info.id,
                        imageUrl: info.squareimgurl,
                        title: info.mname,
                        subtitle: `[${info.range}]${info.title}`,
                        price: info.price
                    }
                }
            )

            this.setState({
                dataList: dataList,
                refreshing: false,
            })
        } catch (error) {
            this.setState({refreshing: false})
        }
    }

    requestDiscount = async () => {
        try {
            let response = await fetch(api.discount)
            let json = await response.json()
            this.setState({discounts: json.data})
        } catch (error) {
            alert(error)
        }
    }

**************************************************************************
https://blog.csdn.net/fengxiaoxiao_1/article/details/77073522
https://github.com/huangchucai/javascript-30/issues/1

